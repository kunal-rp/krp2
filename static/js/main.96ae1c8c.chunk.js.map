{"version":3,"sources":["theme.js","comp/Header/Header.js","comp/Page/Page.js","comp/Page/LandingPage.js","App.js","serviceWorker.js","index.js"],"names":["theme","responsiveFontSizes","createMuiTheme","palette","primary","main","Header","createLink","url","text","Link","color","underline","variant","href","Grid","id","Row","Col","md","sm","Container","fluid","React","Component","Page","this","props","children","LandingPage","className","src","mainContent","withTheme","App","ThemeProvider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+RAiBeA,EAPDC,YACVC,YAAe,CACXC,QAAS,CACLC,QAAS,CAAEC,KAAM,e,sECsCdC,G,6KA3CP,IAIIC,EAAa,SAACC,EAAKC,GACnB,OACI,cAACC,EAAA,EAAD,CACIC,MAAM,UACNC,UAAU,SACVC,QAAQ,UACRC,KAAMN,EAJV,SAMI,6BAAKC,OAgBjB,OACI,cAACM,EAAA,EAAD,CAAMC,GAAG,cAAT,SACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAKC,GAAG,IAAIC,GAAG,KAAf,SA9BD,uCAiCC,cAACF,EAAA,EAAD,CAAKC,GAAG,IAAIC,GAAG,KAAf,SAfJ,cAACC,EAAA,EAAD,CAAWC,OAAK,EAAhB,SACI,eAACL,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,UAAMX,EAAW,6BAA8B,aAC/C,cAACW,EAAA,EAAD,UAAOX,EAAW,mCAAoC,+B,GAxBzDgB,IAAMC,YCGZC,G,6KAJP,OAAO,qBAAKT,GAAG,YAAR,SAAqBU,KAAKC,MAAMC,e,GAF5BL,IAAMC,Y,QCMnBK,G,6KA6CE,OACI,8BACI,cAAC,EAAD,UACA,eAACd,EAAA,EAAD,WACI,cAACG,EAAA,EAAD,UACA,cAAC,EAAD,MAEA,cAACA,EAAA,EAAD,UAlDM,WACd,IAAIX,EAAa,SAACC,EAAKC,GACnB,OACI,cAACC,EAAA,EAAD,CACIC,MAAM,UACNC,UAAU,SACVC,QAAQ,UACRC,KAAMN,EAJV,SAMKC,KAKb,OACI,gCACI,qBAAIqB,UAAU,UAAd,sCAC8B,IAC1B,qBAAKC,IAAI,WAAWf,GAAG,aAF3B,uGAMA,qBAAIc,UAAU,UAAd,gCACwB,IACnBvB,EAAW,8BAA+B,UAF/C,OAIA,qBAAIuB,UAAU,UAAd,wDACgD,IAC3CvB,EACG,+CACA,wBAJR,kBAMoB,IACfA,EACG,8CACA,qBATR,UAyBCyB,gB,GArDKT,IAAMC,YA8DjBS,cAAUJ,GCzDVK,EARH,WACR,OACI,cAACC,EAAA,EAAD,CAAenC,MAAOA,EAAtB,SACI,cAAC,EAAD,OCGQoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.96ae1c8c.chunk.js","sourcesContent":["import { createMuiTheme, responsiveFontSizes } from '@material-ui/core/styles'\n\n/*\nPrimaries\n\nblue - #0B1D51\norange - #FE5D26\nwhite - #FE5D26\n*/\n\nconst theme = responsiveFontSizes(\n    createMuiTheme({\n        palette: {\n            primary: { main: '#0B1D51' },\n        },\n    })\n)\nexport default theme\n","import React from 'react'\nimport { Container, Col, Row, Image, Toast } from 'react-bootstrap'\nimport Grid from '@material-ui/core/Grid';\nimport Link from '@material-ui/core/Link';\nimport './Header.scss'\n\nclass Header extends React.Component {\n    render() {\n        var getLogo = () => {\n            return <h3>KRP</h3>\n        }\n\n        var createLink = (url, text) => {\n            return (\n                <Link\n                    color=\"primary\"\n                    underline=\"always\"\n                    variant=\"inherit\"\n                    href={url}\n                >\n                    <h3>{text}</h3>\n                </Link>\n            )\n        }\n\n        var getNav = () => {\n            return (\n                <Container fluid>\n                    <Row>\n                        <Col>{createLink(\"https://twitter.com/krptxt\", \"Twitter\")}</Col>\n                        <Col >{createLink(\"https://www.instagram.com/krpimg\", \"Instagram\")}</Col>\n                    </Row>\n                </Container>\n            )\n        }\n\n        return (\n            <Grid id=\"header_main\">\n                <Row>\n                    <Col md=\"8\" sm=\"12\">\n                        {getLogo()}\n                    </Col>\n                    <Col md=\"4\" sm=\"12\">\n                        {getNav()}\n                    </Col>\n                </Row>\n            </Grid>\n        )\n    }\n}\n\nexport default Header\n","import React from 'react'\nimport './Page.scss'\n\nclass Page extends React.Component {\n    render() {\n        return <div id=\"page_main\">{this.props.children}</div>\n    }\n}\n\nexport default Page\n","import React from 'react'\nimport Link from '@material-ui/core/Link'\nimport Header from '../Header/Header'\nimport Page from './Page'\nimport { Container, Col } from 'react-bootstrap'\nimport Grid from '@material-ui/core/Grid';\nimport { withTheme } from '@material-ui/core/styles'\nimport './LandingPage.scss'\n\nclass LandingPage extends React.Component {\n    render() {\n        var mainContent = () => {\n            var createLink = (url, text) => {\n                return (\n                    <Link\n                        color=\"primary\"\n                        underline=\"always\"\n                        variant=\"inherit\"\n                        href={url}\n                    >\n                        {text}\n                    </Link>\n                )\n            }\n\n            return (\n                <div>\n                    <h1 className=\"section\">\n                        I'm a software engineer @{' '}\n                        <img src=\"gpay.png\" id=\"gpay_img\" />, specializing in\n                        full stack development with a focus on backend\n                        infastructure and microservices.\n                    </h1>\n                    <h1 className=\"section\">\n                        Tinkering away @ my{' '}\n                        {createLink('https://github.com/kunal-rp', 'GitHub')}.\n                    </h1>\n                    <h1 className=\"section\">\n                        The rest of the time I spend obsessing over{' '}\n                        {createLink(\n                            'https://www.reddit.com/r/MechanicalKeyboards',\n                            'Mechanical Keyboards'\n                        )}\n                        ,NBA stats, and{' '}\n                        {createLink(\n                            'https://www.youtube.com/watch?v=P5k-4-OEuTk',\n                            'Augmented Reality'\n                        )}\n                        .\n                    </h1>\n                </div>\n            )\n        }\n\n        return (\n            <div>\n                <Page>\n                <Grid>\n                    <Col>\n                    <Header />\n                    </Col>\n                    <Col>\n                    {mainContent()}\n                    </Col>\n                    </Grid>\n                </Page>\n            </div>\n        )\n    }\n}\n\nexport default withTheme(LandingPage)\n","import React from 'react'\nimport './App.css'\nimport { ThemeProvider } from '@material-ui/core/styles'\nimport theme from './theme'\nimport LandingPage from './comp/Page/LandingPage'\n\nconst App = () => {\n    return (\n        <ThemeProvider theme={theme}>\n            <LandingPage />\n        </ThemeProvider>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}